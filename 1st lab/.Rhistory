data("airquality")
View(airquality)
tail(airquality)
colnames(airquality)
mean(airquality$Ozone)
colSums(is.na(airquality))
str(airquality)
summary(airquality)
is.na(airquality$Ozone)
mean(airquality$Ozone, na.rm = TRUE )
is.na(airquality$Ozone)
df<- airquality
#airquality$Ozone[is.na(airquality$Ozone)] <- mean(airquality$Ozone, na.rm = TRUE )
df <- df[!df$Ozone == "null", ]
colSums(is.na(airquality))
colSums(is.na(df))
#airquality$Ozone[is.na(airquality$Ozone)] <- mean(airquality$Ozone, na.rm = TRUE )
df <- df[!df$Ozone == "null", ]
colSums(is.na(df))
#airquality$Ozone[is.na(airquality$Ozone)] <- mean(airquality$Ozone, na.rm = TRUE )
na.omit(df$Ozone)
colSums(is.na(df))
#airquality$Ozone[is.na(airquality$Ozone)] <- mean(airquality$Ozone, na.rm = TRUE )
df$Ozone <- na.omit(df$Ozone)
#airquality$Ozone[is.na(airquality$Ozone)] <- mean(airquality$Ozone, na.rm = TRUE )
# To remove all null values from all columns
na.omit(df)
#airquality$Ozone[is.na(airquality$Ozone)] <- mean(airquality$Ozone, na.rm = TRUE )
# To remove all null values from all columns
dim(na.omit(df))
# To remove all null values from all columns
# df <- na.omit(df)
df[!df$Ozone == "null", ]
# To remove all null values from all columns
# df <- na.omit(df)
df
# To remove all null values from all columns
# df <- na.omit(df)
df[!df$Ozone == "null", ]
df
# To remove all null values from all columns
# df <- na.omit(df)
df[!df$Ozone == "NA", ]
# To remove all null values from all columns
# df <- na.omit(df)
df[ df == "NULL"] <- NA
df[!df$Ozone == "NULL", ]
colSums(is.na(df))
# To remove all null values from all columns
# df <- na.omit(df)
na.omit(df)
md.pattern(airquality)
library(mice)
md.pattern(airquality)
methods(mice)
aggr_plot <- aggr(airquality, col=c('navyblue','red'),numbers = TRUE , sortVars=TRUE , labels = names(data),cex.axix = .7,gap=3,ylab = c("Histogram of missing data","Pattern"))
library(VIM)
aggr_plot <- aggr(airquality, col=c('navyblue','red'),numbers = TRUE , sortVars=TRUE , labels = names(data),cex.axix = .7,gap=3,ylab = c("Histogram of missing data","Pattern"))
mean(airquality$Ozone)
colSums(is.na(airquality))
str(airquality)
summary(airquality)
mean(airquality$Ozone, na.rm = TRUE )
dim(airquality)
# To remove all null values from all columns
# df <- na.omit(df)
na.omit(df)
# To remove all null values from all columns
# df <- na.omit(df)
df<- na.omit(df)
dim(df)
md.pattern(airquality)
methods(mice)
aggr_plot <- aggr(airquality, col=c('navyblue','red'),numbers = TRUE , sortVars=TRUE , labels = names(data),cex.axix = .7,gap=3,ylab = c("Histogram of missing data","Pattern"))
plot(airquality)
plot(Ozone~Temp,airquality)
plot(airquality$Temp,xlab = "observation number" , ylab = "Temperature value" , pch = 15 , col = "Red",main = "Scatter plot")
boxplot(airquality)
boxplot(Ozone ~ Month , airquality , xlab = "Month" , ylab = "Ozone (ppb)")
palette()
#Join the two dataset
df1 = data.frame(StudentId = c(101:106) , Product = c("Hindi","English","Maths","Science", "Political Science", "Physics"))
df1
df2 = data.frame(StudentId = c(102,104,106,107,108),state = c("Mangalore","Mysore","Pune","Dehradun","Delhi"))
df2
dfi = merge(x = df1 , y = df2 , by = "StudentId" ,all = FALSE) #if all is true then all will be combined
dfi
dfm = merge(x = df1 , y = df2 , by = "StudentId" ,all = TRUE)
View(dfm)
dfm
dfm
dfl = merge(x = df1 , y = df2 , by = "StudentId" , all.x = TRUE)
dfl
View(manufacturing)
manufacturing <- read.csv("D:/Sem study materials/study materials 6th sem/Study materials by me/Statistical Learning Lab/2nd lab/manufacturing.csv")
View(manufacturing)
df <- manufacturing
View(manufacturing)
head(df)
dim(df)
plot(df)
cor_matrix <- cor(df)
cor_matrix
library(ggcorrplot)
ggcorrplot(cor_matrix, hc.order = TRUE, type = "lower", lab = TRUE)
ggplot(cor_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +  # Heatmap tiles
scale_fill_gradient2() +
labs(title = "Correlation Heatmap", fill = "Correlation") +
theme_minimal()
cor_data <- melt(cor_matrix)
library(ggplot2)
library(reshape2)
cor_data <- melt(cor_matrix)
ggplot(cor_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +  # Heatmap tiles
scale_fill_gradient2() +
labs(title = "Correlation Heatmap", fill = "Correlation") +
theme_minimal()
model <- lm(`Quality Rating` ~ ., data = df)
model <- lm(`Quality Rating` ~ ., data = df)
model <- lm(`Quality Rating` ~ ., data = df)
model <- lm(`Quality.Rating` ~ ., data = df)
summary(model)
aov(model)
resi <-  residuals(model)
resi
qqnorm(resi)
head(Auto)
#forward selection
null_model <- lm(mpg ~1 ,data = mtcars)
summary(null_model)
fwd <- step(null_model , direction = "forward" ,data = mtcars)
summary(fwd)
full_model <- lm(mpg~.,data = mtcars)
summary(full_model)
bwd <- step(null_model,direction = "backward")
summary(bwd)
library(ISLR2)
head(Default)
m1 <- glm(default ~ . , family = binomial , data = Default)
summary(m1)
deviance(m1)
logLik(m1)
m2 <- glm(default ~ student + balance , family = binomial , data = Default) #when only two input
summary(m2)
deviance(m1) - deviance(m2)
qchisq(0.95, 1)
library(ggplot2)
library(boot)
library(MASS)
data("Default")
head(Default)
cor(Default)
str(Default)
num_data <- Default[,sapply(Default,is.numeric)] #select numeric columns
cor_matrix <- cor(num_data , use = "complete.obs")
print(cor_matrix)
install.packages("corrplot") # install the package
library(corrplot) #load the package
corrplot(cor_matrix , method = "circle" , addCoef.col = "black")
#Logistic Regression
glm.fits = glm(default~ student + balance , family = binomial , data = Default)
summary(glm.fits)
coef(glm.fits)
library(stats)
log_likelihood <- logLik(glm.fits)
log_likelihood
summary(glm.fits)$coef
summary(glm.fits)$coef [,4]
glm.probs <- predict(glm.fits , Default , type = "response")
glm.probs[1:10]
contrasts(Default$default)
glm.pred <- ifelse(glm.probs > 0.5 , "Yes" , "No") #convert into binary predictions
glm.pred
table(glm.pred , Default$default) #to find accuracy , sum of diagonal elements divided by total sum in confusion matrix
mean(glm.pred == Default$default)
#Splitting the dataset
trn <- sample(dim(Default)[1], 8000)
trn
Default_train <- Default[trn,]
Default_test <- Default[-trn,]
head(Default_test)
Default_test <- Default_test[,-1]
head(Default_test)
dim(Default_train)
dim(Default_test)
library(ISLR)
lines(smooth.spline(Age,predict(model1)), col="yellow",lwd =3)
library(catdata)# provide heart dataset
library(rpart) # building decison tree
library(rpart.plot)# plotting decison tree
library(MLmetrics)
# Heart DAta
data(heart)
?heart
Heartdata <- as.data.frame(heart) # convert dataset into dataframe
Heartdata
# Splitting
set.seed(1)
sample <-sample(c(TRUE, FALSE), nrow(Heartdata), replace = TRUE , prob=c(0.7,0.3))
train <- Heartdata[sample,]
test <- Heartdata[-sample,]
# Training the Decision TRee model
tree.heart<- rpart(y~sbp+tobacco+ldl+adiposity+factor(famhist)+typea+obesity+alcohol+age,data=train, method='class')
summary(tree.heart)
tree.heart
rpart.plot(tree.heart, cex = 0.6)
